def getAndroidTestCoverageFiles() {
	FileCollection androidTestCoverageFiles = fileTree("$buildDir/outputs/code-coverage/connected/flavors") {
		include "**/*.ec"
	}
	return androidTestCoverageFiles
}

task jacocoMergedTestReport(type: JacocoReport) {
	FileCollection unitTestCoverageFile = files("$buildDir/jacoco/testEnvUsDebugUnitTest.exec")

	FileCollection coverageFiles = getAndroidTestCoverageFiles() + unitTestCoverageFile

	inputs.files(coverageFiles)
	outputs.dir("$buildDir/reports/jacoco/jacocoMergedTestReport/html")

	setSourceDirectories(files(["$buildDir/../src/main/java/com"]))
	setClassDirectories(fileTree(
			dir: "$buildDir/intermediates/classes/envUs/debug/com",
			excludes: ['**/R*.class']))

	// this would only be a merged report if more files were defined here
	// for now it's just one maybe once we get stable UI test

	setExecutionData(coverageFiles)

	reports {
		xml.enabled false
		csv.enabled false
		html.enabled true
	}
}

task runUnitTests {
	dependsOn {
		[
				clean,
				testEnvUsDebugUnitTest
		]
	}
	mustRunAfter {
		[
				clean
		]
	}
	doLast {
		println "Unit tests run in central app"
	}
}

task buildAllReleaseBuilds {
	dependsOn {
		[
				runUnitTests,
				project(':app').tasks.findAll { task ->
					task.name.startsWith("assemble") &&
							task.name.endsWith("Release") &&
							shouldBuildForEnvironment(task)
				}
		]
	}
	mustRunAfter {
		[
				runUnitTests
		]
	}
	doLast {
		println "All release builds have been built"
	}
}

def shouldBuildForEnvironment(task) {
	if (!project.hasProperty("environment")) {
		return task.name.contains("Env")
	}
	def environments = environment.split(',')
	return environments.any { env ->
		task.name.contains("Env" + env.capitalize())
	}
}

// configure the mapping artifacts, namely adding the renamed file to the artifact,
// only adding those of environments in the environment variable
// Renaming e.g.: (envUs/release/)mapping.txt --> mapping-us.txt
task configureMappingArtifacts() {
	dependsOn {
		buildAllReleaseBuilds
	}
	mustRunAfter {
		buildAllReleaseBuilds
	}
	doLast {
		def fromPath = "${buildDir}${File.separator}outputs${File.separator}mapping"
		fileTree(fromPath).include('**/mapping.txt').files.each { each ->
			def newName = each.name.take(each.name.lastIndexOf('.')) + '-' + each.parentFile.parentFile.name.toLowerCase() + '.txt'
			newName = newName.replaceAll('mapping-env', 'mapping-')
			each.renameTo("${fromPath}${File.separator}${newName}")
		}
	}
}

// configure the apk artifacts, namely adding the renamed file to the artifact,
// only adding those of environments in the environment variable 
// Renaming e.g.: app-envUs-release.apk --> pampers-us-release.apk
task configureApkArtifacts() {
	dependsOn {
		[
				buildAllReleaseBuilds
		]
	}
	mustRunAfter {
		[
				buildAllReleaseBuilds
		]
	}
	doLast {
		def fromPath = "${buildDir}${File.separator}outputs${File.separator}apk"
		fileTree(fromPath).include('**/**-release.apk').files.each { each ->
			def newName = each.name.toLowerCase()
			newName = newName.replaceAll('app-env', 'pampers-')
			each.renameTo("${fromPath}${File.separator}${newName}")
		}
	}
}
